name: PythonCI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: pythonflasktutorial_hdb
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  test:
    needs: build
    name: CI (Test & Validations)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies of tests
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests pytest with coverage..
        run: |
          pip install pytest pytest-cov
          pytest --cov=todo_project --cov-report=xml
      - name: Run tests unittest
        run: |
          python -m unittest discover

  bandit:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Perform Bandit Analysis.
        uses: PyCQA/bandit-action@v1

  dependency_check:
    needs: bandit
    runs-on: ubuntu-latest
    name: Dependency-Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Dependency-Check
        with:
          project: "Task-Manager-using-Flask"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan "**/*.py"
            --scan "requirements.txt"
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check report
          path: ${{github.workspace}}/reports
  
  zap_test:
      needs: dependency_check
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Build Docker image
          run: docker build -t flask-app .

        - name: Run Flask app in Docker
          run: |
            docker run -d -p 5000:5000 --name flask-container flask-app
            sleep 10

        #- name: ZAP Scan.
        #  uses: zaproxy/action-full-scan@v0.10.0
        #  with:
        #    target: "http://localhost:5000"

        #- name: Upload ZAP Report.
        #  uses: actions/upload-artifact@v4
        #  with:
        #    name: zap-report
        #    path: report_html.html
        #    compression-level: 9

        - name: Stop Docker container
          if: always()
          run: docker stop flask-container

  deployDockercontainer:
    needs: zap_test
    name: CD (Deploy on Docker Hub)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          exit 0  

      
      # Step 1: Configurar Elasticsearch, Logstash e Kibana
      - name: Set up ELK Stack (Elasticsearch, Logstash, Kibana)
        run: |
          # 1.1 Adicionar chave GPG do Elasticsearch
          curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
          
          # 1.2 Adicionar o repositório APT do Elasticsearch
          sudo apt-get install apt-transport-https
          echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
          
          # 1.3 Atualizar e instalar o ELK Stack
          sudo apt-get update
          sudo apt-get install elasticsearch logstash kibana -y
          
          # 1.4 Habilitar e iniciar os serviços
          sudo systemctl enable elasticsearch.service
          sudo systemctl start elasticsearch.service
          
          sudo systemctl enable logstash.service
          sudo systemctl start logstash.service
          
          sudo systemctl enable kibana.service
          sudo systemctl start kibana.service

      # Step 2: Configurar Logstash para monitorar logs de autenticação
      - name: Configure Logstash to monitor authentication logs
        run: |
          echo "
          input {
            file {
              path => '/var/log/auth.log'  # Caminho para o log de autenticação
              start_position => 'beginning'
              sincedb_path => '/dev/null'
            }
          }
          filter {
            if [message] =~ /Failed password/ {
              grok {
                match => { 'message' => '%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} sshd\[%{NUMBER:pid}\]: Failed password for %{WORD:authentication_method} from %{IP:ip_address} port %{NUMBER:port}' }
              }
              date {
                match => [ 'timestamp', 'MMM  d HH:mm:ss', 'MMM dd HH:mm:ss' ]
              }
            }
          }
          output {
            elasticsearch {
              hosts => ['localhost:9200']
              index => 'auth-logs'
            }
          }
          " | sudo tee /etc/logstash/conf.d/auth_logstash.conf

              # Reiniciar o Logstash para aplicar a configuração
              sudo systemctl restart logstash.service

              # 222.5 verificando retorno.
              # echo '1.5'
              #sudo systemctl status elasticsearch

              # 22222.6 verificando log.
              # echo '1.7'
              #sudo cat /var/log/elasticsearch/elasticsearch.log

              # 222222.7 pingando.
              echo '1.666666666'
              #curl -X GET "localhost:9200"
              sudo cat /etc/elasticsearch/elasticsearch.yml
              sudo sed -i 's/#network\.host: 192\.168\.0\.1/network.host: localhost/' /etc/elasticsearch/elasticsearch.yml
              sudo sed -i 's/#http\.port: 9200/http.port: 9200/' /etc/elasticsearch/elasticsearch.yml
              sudo sed -i 's/http\.host: 0\.0\.0\.0/#http.host: 0.0.0.0/' /etc/elasticsearch/elasticsearch.yml
              sudo sed -i 's/# address here to expose this node on the network:/network.bind_host: 0.0.0.0/' /etc/elasticsearch/elasticsearch.yml
              
              echo '2.666666666'
              sudo cat /etc/elasticsearch/elasticsearch.yml
              echo '3.666666666'
              sudo systemctl restart elasticsearch


      # Step 3: Criar o alerta de tentativas excessivas de login no Elasticsearch
      - name: Set up login failure alert in Elasticsearch
        run: |
          curl -X PUT "localhost:9200/_watcher/watch/failed_login_alert" -H "Content-Type: application/json" -d '
          {
            "trigger": {
              "schedule": {
                "interval": "1m"  # Verificação a cada 1 minuto
              }
            },
            "input": {
              "search": {
                "request": {
                  "indices": ["auth-logs"],
                  "body": {
                    "query": {
                      "bool": {
                        "filter": [
                          { "range": { "@timestamp": { "from": "now-1m" } } },  # Buscar falhas nos últimos 1 minuto
                          { "match": { "message": "Failed password" } }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "condition": {
              "compare": {
                "ctx.payload.hits.total": { "gte": 5 }  # Definir 5 tentativas falhas como gatilho
              }
            },
            "actions": {
              "email_admin": {
                "email": {
                  "to": "${{ secrets.EMAIL_MSG }}",  # Email de alerta
                  "subject": "Alert: Excessive failed login attempts detected",
                  "body": "Multiple failed login attempts detected in the last minute."
                }
              }
            }
          }'

      # Step 4: (Opcional) Instalar Sentry para monitoramento de erros em apps
      - name: Install Sentry for error monitoring
        run: |
          pip install sentry-sdk
          echo "
          import sentry_sdk
          from sentry_sdk.integrations.flask import FlaskIntegration
          
          sentry_sdk.init(
              dsn='${{ secrets.SENTRY_DSN }}',
              integrations=[FlaskIntegration()],
              traces_sample_rate=1.0
          )
          " >> app.py


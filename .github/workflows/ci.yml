name: PythonCI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: pythonflasktutorial_hdb
  EMAIL_ALERTA: wrequiao@gmail.com
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  test:
    needs: build
    name: CI (Testes unitários, integração e funcionais)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies of tests
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests pytest with coverage..
        run: |
          pip install pytest pytest-cov
          pytest --cov=todo_project --cov-report=xml
      - name: Run tests unittest
        run: |
          python -m unittest discover

  bandit:
    needs: test
    runs-on: ubuntu-latest
    name: SAST Bandit (Analisando vulnerabilidades)
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Perform Bandit Analysis.
        uses: PyCQA/bandit-action@v1

  dependency_check:
    needs: bandit
    runs-on: ubuntu-latest
    name: Owasp Dependency-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Dependency-Check
        with:
          project: "Task-Manager-using-Flask"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan "**/*.py"
            --scan "requirements.txt"
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check report
          path: ${{github.workspace}}/reports
  
  zap_test:
      needs: dependency_check
      runs-on: ubuntu-latest
      name: OWASP ZAP (DAST)
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Build Docker image
          run: docker build -t flask-app .

        - name: Run Flask app in Docker
          run: |
            docker run -d -p 5000:5000 --name flask-container flask-app
            sleep 10

        - name: ZAP Scan.
          uses: zaproxy/action-full-scan@v0.10.0
          with:
            target: "http://localhost:5000"

        - name: Upload ZAP Report.
          uses: actions/upload-artifact@v4
          with:
            name: zap-report
            path: report_html.html
            compression-level: 9

        - name: Stop Docker container
          if: always()
          run: docker stop flask-container

  ElasticsearchLogstashKiban:
    needs: zap_test
    name: Elasticsearch, Logstash, Kiban, Sentry (Feedback, Monitoramento e Logs)
    runs-on: ubuntu-latest
    environment: production
    steps:
       # Step 6: Install and configure monitoring tools (ELK + Sentry)
      - name: Set up ELK Stack (Elasticsearch, Logstash, Kibana)
        run: |
          # Step 6.1: Add the Elastic GPG key
          curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg

          # Step 6.2: Add the Elastic APT repository
          sudo apt-get install apt-transport-https
          echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list

          # Step 6.3: Update and install ELK Stack
          sudo apt-get update
          sudo apt-get install elasticsearch logstash kibana -y

          # Step 6.4: Enable and start Elasticsearch
          sudo systemctl daemon-reload
          sudo systemctl enable elasticsearch.service
          sudo systemctl start elasticsearch.service

          # Step 6.5: Enable and start Logstash
          sudo systemctl enable logstash.service
          sudo systemctl start logstash.service

          # Step 6.6: Enable and start Kibana
          sudo systemctl enable kibana.service
          sudo systemctl start kibana.service

          # Optional: Add Kibana setup script for automation
          echo "ELK Stack installed and started successfully"
          
          # Configure Logstash to monitor logs
          echo "
          input {
            file {
              path => '/var/log/flask/app.log'
              start_position => 'beginning'
            }
          }
          output {
            elasticsearch {
              hosts => ['localhost:9200']
            }
          }" | sudo tee /etc/logstash/conf.d/logstash.conf
          
          sudo systemctl enable logstash.service
          sudo systemctl start logstash.service

          # Step 6.2: Set up Sentry for error monitoring
          pip install sentry-sdk
          
          # Configure Sentry in the Flask app
          echo "
          import sentry_sdk
          from sentry_sdk.integrations.flask import FlaskIntegration
          
          sentry_sdk.init(
              dsn=${{ secrets.SENTRY_DSN }},
              integrations=[FlaskIntegration()],
              traces_sample_rate=1.0
          )
          " >> app.py

      # Step 7: Set up alerts for security threats (e.g., brute force attacks)
      - name: Set up alert rules
        run: |
          # Configure alert rules in ELK Stack
          # For example, detect excessive failed logins
          echo '
          POST _watcher/watch/_start
          {
            "trigger": {
              "schedule": { "interval": "30s" }
            },
            "input": {
              "search": {
                "request": {
                  "indices": [ "flask-logs" ],
                  "body": {
                    "query": {
                      "bool": {
                        "filter": [
                          { "range": { "@timestamp": { "from": "now-30s" } } },
                          { "match": { "log_level": "ERROR" } }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "condition": {
              "compare": { "ctx.payload.hits.total": { "gte": 5 } }
            },
            "actions": {
              "email_admin": {
                "email": {
                  "to": "${{ env.EMAIL_ALERTA }},
                  "subject": "Alert: Possible brute force attack detected",
                  "body": "Multiple failed login attempts detected."
                }
              }
            }
          }' #| 
          #curl -X PUT "localhost:9200/_watcher/watch/brute_force_alert" -H "Content-Type: application/json" -d @-
                  
  deployDockercontainer:
    needs: ElasticsearchLogstashKiban
    name: CD (Deploy on Docker Hub)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          exit 0  
                   
                